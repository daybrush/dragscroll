{"version":3,"file":"dragscroll.min.js","sources":["../src/DragScroll.ts"],"sourcesContent":["import EventEmitter from \"@scena/event-emitter\";\nimport { isFunction, isString, now } from \"@daybrush/utils\";\nimport { CheckScrollOptions, DragScrollEvents, DragScrollOptions, Rect } from \"./types\";\n\nfunction getDefaultScrollPosition(e: { container: HTMLElement, direction: number[] }) {\n    let container = e.container;\n\n    if (container === document.body) {\n        return [\n            container.scrollLeft || document.documentElement.scrollLeft,\n            container.scrollTop || document.documentElement.scrollTop,\n        ];\n    }\n    return [\n        container.scrollLeft,\n        container.scrollTop,\n    ];\n}\n\nfunction getContainerElement(container: DragScrollOptions[\"container\"]): HTMLElement {\n    if (!container) {\n        return null;\n    } else if (isString(container)) {\n        return document.querySelector<HTMLElement>(container);\n    } if (isFunction(container)) {\n        return container();\n    } else if (container instanceof Element) {\n        return container;\n    } else if (\"current\" in container) {\n        return container.current;\n    } else if (\"value\" in container) {\n        return container.value;\n    }\n}\n\n/**\n * @sort 1\n */\nclass DragScroll extends EventEmitter<DragScrollEvents> {\n    private _startRect: Rect | null = null;\n    private _startPos: number[] = [];\n    private _prevTime: number = 0;\n    private _timer: number = 0;\n    private _prevScrollPos: number[] = [0, 0];\n    private _isWait = false;\n    private _flag = false;\n    /**\n     */\n    public dragStart(e: any, options: DragScrollOptions) {\n        const container = getContainerElement(options.container);\n\n        if (!container) {\n            this._flag = false;\n            return;\n        }\n        let top = 0;\n        let left = 0;\n        let width = 0;\n        let height = 0;\n\n        if (container === document.body) {\n            width = window.innerWidth;\n            height = window.innerHeight;\n        } else {\n            const rect = container.getBoundingClientRect();\n\n            top = rect.top;\n            left = rect.left;\n            width = rect.width;\n            height = rect.height;\n        }\n\n        this._flag = true;\n        this._startPos = [e.clientX, e.clientY];\n        this._startRect = { top, left, width, height };\n        this._prevScrollPos = this._getScrollPosition([0, 0], options);\n    }\n    public drag(e: any, options: DragScrollOptions) {\n        clearTimeout(this._timer);\n        if (!this._flag) {\n            return;\n        }\n        const {\n            clientX,\n            clientY,\n        } = e;\n        const {\n            threshold = 0,\n        } = options;\n        const {\n            _startRect,\n            _startPos,\n        } = this;\n\n        const direction = [0, 0];\n\n        if (_startRect.top > clientY - threshold) {\n            if (_startPos[1] > _startRect.top || clientY < _startPos[1]) {\n                direction[1] = -1;\n            }\n        } else if (_startRect.top + _startRect.height < clientY + threshold) {\n            if (_startPos[1] < _startRect.top + _startRect.height || clientY > _startPos[1]) {\n                direction[1] = 1;\n            }\n        }\n        if (_startRect.left > clientX - threshold) {\n            if (_startPos[0] > _startRect.left || clientX < _startPos[0]) {\n                direction[0] = -1;\n            }\n        } else if (_startRect.left + _startRect.width < clientX + threshold) {\n            if (_startPos[0] < _startRect.left + _startRect.width || clientX > _startPos[0]) {\n                direction[0] = 1;\n            }\n        }\n\n        if (!direction[0] && !direction[1]) {\n            return false;\n        }\n        return this._continueDrag({\n            ...options,\n            direction,\n            inputEvent: e,\n            isDrag: true,\n        });\n    }\n    /**\n     */\n    public checkScroll(options: CheckScrollOptions) {\n        if (this._isWait) {\n            return false;\n        }\n        const {\n            prevScrollPos = this._prevScrollPos,\n            direction,\n            throttleTime = 0,\n            inputEvent,\n            isDrag,\n        } = options;\n        const nextScrollPos = this._getScrollPosition(direction || [0, 0], options);\n        const offsetX = nextScrollPos[0] - prevScrollPos[0];\n        const offsetY = nextScrollPos[1] - prevScrollPos[1];\n\n        const nextDirection = direction || [\n            offsetX ? Math.abs(offsetX) / offsetX : 0,\n            offsetY ? Math.abs(offsetY) / offsetY : 0,\n        ];\n        this._prevScrollPos = nextScrollPos;\n\n        if (!offsetX && !offsetY) {\n            return false;\n        }\n        /**\n         * @event DragScroll#move\n         */\n        this.trigger(\"move\", {\n            offsetX: nextDirection[0] ? offsetX : 0,\n            offsetY: nextDirection[1] ? offsetY : 0,\n            inputEvent,\n        });\n\n        if (throttleTime && isDrag) {\n            clearTimeout(this._timer);\n            this._timer = window.setTimeout(() => {\n                this._continueDrag(options);\n            }, throttleTime);\n        }\n        return true;\n    }\n    /**\n     */\n    public dragEnd() {\n        this._flag = false;\n        clearTimeout(this._timer);\n    }\n    private _getScrollPosition(direction: number[], options: DragScrollOptions) {\n        const {\n            container,\n            getScrollPosition = getDefaultScrollPosition,\n        } = options;\n        return getScrollPosition({ container: getContainerElement(container), direction });\n    }\n    private _continueDrag(options: CheckScrollOptions) {\n        const {\n            container,\n            direction,\n            throttleTime,\n            useScroll,\n            isDrag,\n            inputEvent,\n        } = options;\n\n        if (!this._flag || (isDrag && this._isWait)) {\n            return;\n        }\n        const nowTime = now();\n        const distTime = Math.max(throttleTime + this._prevTime - nowTime, 0);\n\n        if (distTime > 0) {\n            clearTimeout(this._timer);\n            this._timer = window.setTimeout(() => {\n                this._continueDrag(options);\n            }, distTime);\n\n            return false;\n        }\n\n        this._prevTime = nowTime;\n        const prevScrollPos = this._getScrollPosition(direction, options);\n\n        this._prevScrollPos = prevScrollPos;\n\n        if (isDrag) {\n            this._isWait = true;\n        }\n        const param = {\n            container: getContainerElement(container),\n            direction,\n            inputEvent,\n        };\n        options.requestScroll?.(param);\n        /**\n         * @event DragScroll#scroll\n         */\n        this.trigger(\"scroll\", param);\n\n        this._isWait = false;\n        return useScroll || this.checkScroll({\n            ...options,\n            prevScrollPos,\n            direction,\n            inputEvent,\n        });\n    }\n}\n\nexport default DragScroll;\n"],"names":["getDefaultScrollPosition","e","container","document","body","scrollLeft","documentElement","scrollTop","getContainerElement","querySelector","Element","current","value","_this","options","top","left","width","height","window","innerWidth","innerHeight","rect","getBoundingClientRect","_flag","_startPos","clientX","clientY","_startRect","_prevScrollPos","this","_getScrollPosition","clearTimeout","_timer","_a","threshold","direction","_continueDrag","inputEvent","isDrag","_isWait","prevScrollPos","_b","throttleTime","nextScrollPos","offsetX","offsetY","nextDirection","Math","abs","trigger","setTimeout","useScroll","nowTime","distTime","max","_prevTime","param","requestScroll","checkScroll"],"mappings":"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"}