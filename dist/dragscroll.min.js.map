{"version":3,"file":"dragscroll.min.js","sources":["../src/DragScroll.ts"],"sourcesContent":["import EventEmitter from \"@scena/event-emitter\";\nimport { now } from \"@daybrush/utils\";\nimport { CheckScrollOptions, DragScrollEvents, DragScrollOptions, Rect } from \"./types\";\n\nfunction getDefaultScrollPosition(e: { container: HTMLElement, direction: number[] }) {\n    let container = e.container;\n\n    if (container === document.body) {\n        return [\n            container.scrollLeft || document.documentElement.scrollLeft,\n            container.scrollTop || document.documentElement.scrollTop,\n        ];\n    }\n    return [\n        container.scrollLeft,\n        container.scrollTop,\n    ];\n}\n\nexport default class DragScroll extends EventEmitter<DragScrollEvents> {\n    private _startRect: Rect | null = null;\n    private _startPos: number[] = [];\n    private _prevTime: number = 0;\n    private _timer: number = 0;\n    private _prevScrollPos: number[] = [0, 0];\n    private _isWait = false;\n    public dragStart(e: any, options: DragScrollOptions) {\n        const container = options.container;\n        let top = 0;\n        let left = 0;\n        let width = 0;\n        let height = 0;\n\n        if (container === document.body) {\n            width = window.innerWidth;\n            height = window.innerHeight;\n        } else {\n            const rect = container.getBoundingClientRect();\n\n            top = rect.top;\n            left = rect.left;\n            width = rect.width;\n            height = rect.height;\n        }\n\n        this._startPos = [e.clientX, e.clientY];\n        this._startRect = { top, left, width, height };\n        this._prevScrollPos = this._getScrollPosition([0, 0], options);\n    }\n    public drag(e: any, options: DragScrollOptions) {\n        const {\n            clientX,\n            clientY,\n        } = e;\n        const {\n            threshold = 0,\n        } = options;\n        const {\n            _startRect,\n            _startPos,\n        } = this;\n\n        const direction = [0, 0];\n\n        if (_startRect.top > clientY - threshold) {\n            if (_startPos[1] > _startRect.top || clientY < _startPos[1]) {\n                direction[1] = -1;\n            }\n        } else if (_startRect.top + _startRect.height < clientY + threshold) {\n            if (_startPos[1] < _startRect.top + _startRect.height || clientY > _startPos[1]) {\n                direction[1] = 1;\n            }\n        }\n        if (_startRect.left > clientX - threshold) {\n            if (_startPos[0] > _startRect.left || clientX < _startPos[0]) {\n                direction[0] = -1;\n            }\n        } else if (_startRect.left + _startRect.width < clientX + threshold) {\n            if (_startPos[0] < _startRect.left + _startRect.width || clientX > _startPos[0]) {\n                direction[0] = 1;\n            }\n        }\n        clearTimeout(this._timer);\n\n        if (!direction[0] && !direction[1]) {\n            return false;\n        }\n        return this._continueDrag({\n            ...options,\n            direction,\n            inputEvent: e,\n            isDrag: true,\n        });\n    }\n    public checkScroll(options: CheckScrollOptions) {\n        if (this._isWait) {\n            return false;\n        }\n        const {\n            prevScrollPos = this._prevScrollPos,\n            direction,\n            throttleTime = 0,\n            inputEvent,\n            isDrag,\n        } = options;\n        const nextScrollPos = this._getScrollPosition(direction || [0, 0], options);\n        const offsetX = nextScrollPos[0] - prevScrollPos[0];\n        const offsetY = nextScrollPos[1] - prevScrollPos[1];\n\n        const nextDirection = direction || [\n            offsetX ? Math.abs(offsetX) / offsetX : 0,\n            offsetY ? Math.abs(offsetY) / offsetY : 0,\n        ];\n        this._prevScrollPos = nextScrollPos;\n\n        if (!offsetX && !offsetY) {\n            return false;\n        }\n        this.trigger(\"move\", {\n            offsetX: nextDirection[0] ? offsetX : 0,\n            offsetY: nextDirection[1] ? offsetY : 0,\n            inputEvent,\n        });\n\n        if (throttleTime && isDrag) {\n            this._timer = window.setTimeout(() => {\n                this._continueDrag(options);\n            }, throttleTime);\n        }\n        return true;\n    }\n    public dragEnd() {\n        clearTimeout(this._timer);\n    }\n    private _getScrollPosition(direction: number[], options: DragScrollOptions) {\n        const {\n            container,\n            getScrollPosition = getDefaultScrollPosition,\n        } = options;\n        return getScrollPosition({ container, direction });\n    }\n    private _continueDrag(options: CheckScrollOptions) {\n        const {\n            container,\n            direction,\n            throttleTime,\n            useScroll,\n            isDrag,\n            inputEvent,\n        } = options;\n\n        if (isDrag && this._isWait) {\n            return;\n        }\n        const nowTime = now();\n        const distTime = Math.max(throttleTime + this._prevTime - nowTime, 0);\n\n        if (distTime > 0) {\n            this._timer = window.setTimeout(() => {\n                this._continueDrag(options);\n            }, distTime);\n\n            return false;\n        }\n\n        this._prevTime = nowTime;\n        const prevScrollPos = this._getScrollPosition(direction, options);\n\n        this._prevScrollPos = prevScrollPos;\n\n        if (isDrag) {\n            this._isWait = true;\n        }\n        this.trigger(\"scroll\", {\n            container,\n            direction,\n            inputEvent,\n        });\n\n        this._isWait = false;\n        return useScroll || this.checkScroll({\n            ...options,\n            prevScrollPos,\n            direction,\n            inputEvent,\n        });\n    }\n}\n"],"names":["getDefaultScrollPosition","e","container","document","body","scrollLeft","documentElement","scrollTop","_this","options","top","left","width","height","window","innerWidth","innerHeight","rect","getBoundingClientRect","_startPos","clientX","clientY","_startRect","_prevScrollPos","this","_getScrollPosition","_a","threshold","direction","clearTimeout","_timer","_continueDrag","inputEvent","isDrag","_isWait","prevScrollPos","_b","throttleTime","nextScrollPos","offsetX","offsetY","nextDirection","Math","abs","trigger","setTimeout","useScroll","nowTime","distTime","max","_prevTime","checkScroll"],"mappings":"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"}